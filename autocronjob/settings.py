"""
Django settings for autocronjob project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR, 'autocronjob.conf'))
REDIS_HOST = config.get('redis', 'redis_host')
REDIS_PORT = config.get('redis', 'redis_port')
REDIS_PASSWD = config.get('redis', 'redis_passwd')
REDIS_DB = config.get('redis', 'redis_db')
LOG_DB = config.get('redis', 'log_db')
REMOTE_USER = config.get('connection_info', 'user')
REMOTE_PORT = config.get('connection_info', 'port')
REMOTE_PASSWD = config.get('connection_info', 'password')
LOG_FILE = config.get('worker', 'log_file')
# ssh key
PRIVATE_KEY = os.path.join(BASE_DIR, 'ssh_key/id_rsa')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd7h1chkr&3%933-%0abh6z3e@w4)92_@@_mswwjxzuri5k#h%m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 替换系统用户
AUTH_USER_MODEL = 'user.UserProfile'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'simple_history',
    'django_celery_results',
    'django_celery_beat',
    'rest_framework',
    'django_filters',
    'crispy_forms',
    'bootstrap4',
    'channels',
    'cronjob',
    'user',
    'log',
    'corsheaders',  # 允许跨域APPS
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'autocronjob.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'autocronjob.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {}
if config.get('db', 'engine') == 'mysql':
    DB_HOST = config.get('db', 'host')
    DB_PORT = config.getint('db', 'port')
    DB_USER = config.get('db', 'user')
    DB_PASSWORD = config.get('db', 'password')
    DB_DATABASE = config.get('db', 'database')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DB_DATABASE,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }
    }
elif config.get('db', 'engine') == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': config.get('db', 'database'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# 设置时区
LANGUAGE_CODE = 'zh-hans'  # 中文支持，django1.8以后支持；1.8以前是zh-cn
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = True  # 默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 访问api文档的权限控制
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # 解析器类的列表或元组
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
    ),

}
# Session的cookie保存的域名
SESSION_COOKIE_DOMAIN = None
# 是否Https传输cookie
SESSION_COOKIE_SECURE = False
# 是否Session的cookie只支持http传输
SESSION_COOKIE_HTTPONLY = True
# Session的cookie失效日期（2周） 默认1209600秒
SESSION_COOKIE_AGE = 604800
# 是否关闭浏览器使得Session过期
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# 如果你设置了session的过期时间 30分钟后，
# 这个参数是False30分钟过后，session准时失效
# 如果设置 True，在30分钟期间有请求服务端，就不会过期！
# （为什么逛一晚上淘宝，也不会登出，但是浏览器不刷新了就会自动登出）
SESSION_SAVE_EVERY_REQUEST = True

"""
djano celery to accomplish some async job configuration.
"""
if REDIS_PASSWD:
    redis_connection_addr = \
        f'redis://{REDIS_PASSWD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'
else:
    redis_connection_addr = \
        f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

CELERY_BROKER_URL = redis_connection_addr
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_COUNT = ['json', 'msgpack']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# ETA超过12h没有执行完，worker会认为没有执行任务，然后事件会再被worker启动
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 43200}
# 禁用预留任务数量，默认是4
# 当设置为 1 时，表示 disable 预取功能；当设置为 0 时，
# 表示 Worker 会尽可能多的获取任务。
CELERYD_PREFETCH_MULTIPLIER = 1
# celery任务结果有效期一年
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24 * 365
# 开启时区设置
CELERY_ENABLE_UTC = True
# 运行50个任务就死掉，防止内存泄露
CELERYD_MAX_TASKS_PER_CHILD = 50

# 1.默认是禁用的
# 2.任务发送完成是否需要确认
# 3.注意：开启的话，这意味着，如果工作程序(celery worker)在执行过程中崩溃，
# 则该任务可能会多次执行。确保您的任务是幂等的。
# 4.假如job需要运行时间比较长，要求worker同时只能执行一个job。
# 所以不希望任何一个worker在执行一个任务的时候，
# 再接收其他任务（除非所有 worker 都在执行任务。），这种情况下，需要开启
# 5.只有当任务完成（成功/失败）后，再向 Broker 回传 ACK。
# 而代价就是消息队列的性能会降低，毕竟任务消息占用队列资源的时间变长了。
# CELERY_TASK_ACKS_LATE = True

# 启用后，所有任务的消息将被确认，即使它们失败或超时，
# 前提是CELERY_TASK_ACKS_LATE is True
# CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT = True

# 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据
# CELERY_MESSAGE_COMPRESSION = 'zlib'
# 自动伸缩
CELERYD_AUTOSCALER = 'celery.worker.autoscale:Autoscaler'
CELERYD_AUTORELOADER = 'celery.worker.autoreload:Autoreloader'
# log format
CELERYD_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
CELERYD_TASK_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] ' \
                          '%(task_name)s[%(task_id)s]: %(message)s'
# worker pool
CELERYD_POOL = 'prefork'
'''
Task hard time limit in seconds.
The worker processing the task will be killed and
replaced with a new one when this is exceeded.
'''
CELERYD_TASK_TIME_LIMIT = 86400
'''
Task soft time limit in seconds.
The SoftTimeLimitExceeded exception will be raised when this is exceeded.
The task can catch this to e.g.
clean up before the hard time limit comes.
'''
CELERYD_TASK_SOFT_TIME_LIMIT = 80000

# 自定义认证方式
AUTHENTICATION_BACKENDS = (
    'user.api.CustomBackend',
)

# 允许所有源访问（如果不需要允许全部，可以设置CORS_ORIGIN_WHITELIST=()
# 参数，将需要访问的域名添加即可）
CORS_ORIGIN_ALLOW_ALL = True
# 是否允许携带cookie
CORS_ALLOW_CREDENTIALS = True
# jwt设置
import datetime
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=30),
    'JWT_AUTH_HEADER_PREFIX': 'Token',
    'JWT_ALLOW_REFRESH': True,
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.api.jwt_response_payload_handler',
}
APPEND_SLASH = False


